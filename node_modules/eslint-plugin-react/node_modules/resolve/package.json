{
  "name": "resolve",
  "description": "resolve like require.resolve() on behalf of files asynchronously and synchronously",
  "version": "2.0.0-next.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/browserify/resolve.git"
  },
  "main": "index.js",
  "exports": {
    ".": [
      {
        "import": "./index.mjs",
        "default": "./index.js"
      },
      "./index.js"
    ],
    "./sync": [
      {
        "default": "./lib/sync.js"
      },
      "./lib/sync.js"
    ],
    "./async": [
      {
        "default": "./lib/async.js"
      },
      "./lib/async.js"
    ]
  },
  "keywords": [
    "resolve",
    "require",
    "node",
    "module"
  ],
  "scripts": {
    "prepublish": "safe-publish-latest",
    "prelint": "eclint check '**/*'",
    "lint": "eslint --ext=js,mjs .",
    "pretests-only": "cd ./test/resolver/nested_symlinks && node mylib/sync && node mylib/async",
    "tests-only": "tape test/*.js",
    "pretest": "npm run lint",
    "test": "npm run --silent tests-only",
    "posttest": "npm run test:multirepo && aud --production",
    "test:multirepo": "cd ./test/resolver/multirepo && npm install && npm test"
  },
  "devDependencies": {
    "@ljharb/eslint-config": "^17.5.1",
    "array.prototype.map": "^1.0.3",
    "aud": "^1.1.4",
    "eclint": "^2.8.1",
    "eslint": "^7.19.0",
    "object-keys": "^1.1.1",
    "safe-publish-latest": "^1.1.4",
    "tap": "0.4.13",
    "tape": "^5.1.1"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "funding": {
    "url": "https://github.com/sponsors/ljharb"
  },
  "dependencies": {
    "is-core-module": "^2.2.0",
    "path-parse": "^1.0.6"
  },
  "readme": "# resolve\n\nimplements the [node `require.resolve()`\nalgorithm](https://nodejs.org/api/modules.html#modules_all_together)\nsuch that you can `require.resolve()` on behalf of a file asynchronously and\nsynchronously\n\n[![build status](https://secure.travis-ci.org/browserify/resolve.png)](http://travis-ci.org/browserify/resolve)\n\n# example\n\nasynchronously resolve:\n\n```js\nvar resolve = require('resolve');\nresolve('tap', { basedir: __dirname }, function (err, res) {\n    if (err) console.error(err);\n    else console.log(res);\n});\n```\n\n```\n$ node example/async.js\n/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\n```\n\nsynchronously resolve:\n\n```js\nvar resolve = require('resolve');\nvar res = resolve.sync('tap', { basedir: __dirname });\nconsole.log(res);\n```\n\n```\n$ node example/sync.js\n/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\n```\n\n# methods\n\n```js\nvar resolve = require('resolve');\n```\n\nFor both the synchronous and asynchronous methods, errors may have any of the following `err.code` values:\n\n- `MODULE_NOT_FOUND`: the given path string (`id`) could not be resolved to a module\n- `INVALID_BASEDIR`: the specified `opts.basedir` doesn't exist, or is not a directory\n- `INVALID_PACKAGE_MAIN`: a `package.json` was encountered with an invalid `main` property (eg. not a string)\n\n## resolve(id, opts={}, cb)\n\nAsynchronously resolve the module path string `id` into `cb(err, res [, pkg])`, where `pkg` (if defined) is the data from `package.json`.\n\noptions are:\n\n* opts.basedir - directory to begin resolving from\n\n* opts.package - `package.json` data applicable to the module being loaded\n\n* opts.extensions - array of file extensions to search in order\n\n* opts.includeCoreModules - set to `false` to exclude node core modules (e.g. `fs`) from the search\n\n* opts.readFile - how to read files asynchronously\n\n* opts.isFile - function to asynchronously test whether a file exists\n\n* opts.isDirectory - function to asynchronously test whether a file exists and is a directory\n\n* opts.realpath - function to asynchronously resolve a potential symlink to its real path\n\n* `opts.readPackage(readFile, pkgfile, cb)` - function to asynchronously read and parse a package.json file\n  * readFile - the passed `opts.readFile` or `fs.readFile` if not specified\n  * pkgfile - path to package.json\n  * cb - callback\n\n* `opts.packageFilter(pkg, pkgfile, dir)` - transform the parsed package.json contents before looking at the \"main\" field\n  * pkg - package data\n  * pkgfile - path to package.json\n  * dir - directory that contains package.json\n\n* `opts.pathFilter(pkg, path, relativePath)` - transform a path within a package\n  * pkg - package data\n  * path - the path being resolved\n  * relativePath - the path relative from the package.json location\n  * returns - a relative path that will be joined from the package.json location\n\n* opts.paths - require.paths array to use if nothing is found on the normal `node_modules` recursive walk (probably don't use this)\n\n  For advanced users, `paths` can also be a `opts.paths(request, start, opts)` function\n    * request - the import specifier being resolved\n    * start - lookup path\n    * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution\n    * opts - the resolution options\n\n* `opts.packageIterator(request, start, opts)` - return the list of candidate paths where the packages sources may be found (probably don't use this)\n    * request - the import specifier being resolved\n    * start - lookup path\n    * getPackageCandidates - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution\n    * opts - the resolution options\n\n* opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `\"node_modules\"`\n\n* opts.preserveSymlinks - if true, doesn't resolve `basedir` to real path before resolving.\nThis is the way Node resolves dependencies when executed with the [--preserve-symlinks](https://nodejs.org/api/all.html#cli_preserve_symlinks) flag.\n\ndefault `opts` values:\n\n```js\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: ['.js'],\n    includeCoreModules: true,\n    readFile: fs.readFile,\n    isFile: function isFile(file, cb) {\n        fs.stat(file, function (err, stat) {\n            if (!err) {\n                return cb(null, stat.isFile() || stat.isFIFO());\n            }\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n            return cb(err);\n        });\n    },\n    isDirectory: function isDirectory(dir, cb) {\n        fs.stat(dir, function (err, stat) {\n            if (!err) {\n                return cb(null, stat.isDirectory());\n            }\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n            return cb(err);\n        });\n    },\n    realpath: function realpath(file, cb) {\n        var realpath = typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;\n        realpath(file, function (realPathErr, realPath) {\n            if (realPathErr && realPathErr.code !== 'ENOENT') cb(realPathErr);\n            else cb(null, realPathErr ? file : realPath);\n        });\n    },\n    readPackage: function defaultReadPackage(readFile, pkgfile, cb) {\n        readFile(pkgfile, function (readFileErr, body) {\n            if (readFileErr) cb(readFileErr);\n            else {\n                try {\n                    var pkg = JSON.parse(body);\n                    cb(null, pkg);\n                } catch (jsonErr) {\n                    cb(null);\n                }\n            }\n        });\n    },\n    moduleDirectory: 'node_modules',\n    preserveSymlinks: false\n}\n```\n\n## resolve.sync(id, opts)\n\nSynchronously resolve the module path string `id`, returning the result and\nthrowing an error when `id` can't be resolved.\n\noptions are:\n\n* opts.basedir - directory to begin resolving from\n\n* opts.extensions - array of file extensions to search in order\n\n* opts.includeCoreModules - set to `false` to exclude node core modules (e.g. `fs`) from the search\n\n* opts.readFileSync - how to read files synchronously\n\n* opts.isFile - function to synchronously test whether a file exists\n\n* opts.isDirectory - function to synchronously test whether a file exists and is a directory\n\n* opts.realpathSync - function to synchronously resolve a potential symlink to its real path\n\n* `opts.readPackageSync(readFileSync, pkgfile)` - function to synchronously read and parse a package.json file\n  * readFileSync - the passed `opts.readFileSync` or `fs.readFileSync` if not specified\n  * pkgfile - path to package.json\n\n* `opts.packageFilter(pkg, pkgfile, dir)` - transform the parsed package.json contents before looking at the \"main\" field\n  * pkg - package data\n  * pkgfile - path to package.json\n  * dir - directory that contains package.json\n\n* `opts.pathFilter(pkg, path, relativePath)` - transform a path within a package\n  * pkg - package data\n  * path - the path being resolved\n  * relativePath - the path relative from the package.json location\n  * returns - a relative path that will be joined from the package.json location\n\n* opts.paths - require.paths array to use if nothing is found on the normal `node_modules` recursive walk (probably don't use this)\n\n  For advanced users, `paths` can also be a `opts.paths(request, start, opts)` function\n    * request - the import specifier being resolved\n    * start - lookup path\n    * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution\n    * opts - the resolution options\n\n* `opts.packageIterator(request, start, opts)` - return the list of candidate paths where the packages sources may be found (probably don't use this)\n    * request - the import specifier being resolved\n    * start - lookup path\n    * getPackageCandidates - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution\n    * opts - the resolution options\n\n* opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `\"node_modules\"`\n\n* opts.preserveSymlinks - if true, doesn't resolve `basedir` to real path before resolving.\nThis is the way Node resolves dependencies when executed with the [--preserve-symlinks](https://nodejs.org/api/all.html#cli_preserve_symlinks) flag.\n\ndefault `opts` values:\n\n```js\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: ['.js'],\n    includeCoreModules: true,\n    readFileSync: fs.readFileSync,\n    isFile: function isFile(file) {\n        try {\n            var stat = fs.statSync(file);\n        } catch (e) {\n            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n            throw e;\n        }\n        return stat.isFile() || stat.isFIFO();\n    },\n    isDirectory: function isDirectory(dir) {\n        try {\n            var stat = fs.statSync(dir);\n        } catch (e) {\n            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n            throw e;\n        }\n        return stat.isDirectory();\n    },\n    realpathSync: function realpathSync(file) {\n        try {\n            var realpath = typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;\n            return realpath(file);\n        } catch (realPathErr) {\n            if (realPathErr.code !== 'ENOENT') {\n                throw realPathErr;\n            }\n        }\n        return file;\n    },\n    readPackageSync: function defaultReadPackageSync(readFileSync, pkgfile) {\n        var body = readFileSync(pkgfile);\n        try {\n            var pkg = JSON.parse(body);\n            return pkg;\n        } catch (jsonErr) {}\n    },\n    moduleDirectory: 'node_modules',\n    preserveSymlinks: false\n}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install resolve\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "gitHead": "c6bf2a5a23f7bbbd523fcdf39897f8d3908b9442",
  "bugs": {
    "url": "https://github.com/browserify/resolve/issues"
  },
  "homepage": "https://github.com/browserify/resolve#readme",
  "_id": "resolve@2.0.0-next.3",
  "_nodeVersion": "14.15.4",
  "_npmVersion": "6.14.10",
  "dist": {
    "integrity": "sha512-W8LucSynKUIDu9ylraa7ueVZ7hc0uAgJBxVsQSKOXOyle8a93qXhcz+XAXZ8bIq2d6i4Ehddn6Evt+0/UwKk6Q==",
    "shasum": "d41016293d4a8586a39ca5d9b5f15cbea1f55e46",
    "tarball": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.3.tgz",
    "fileCount": 96,
    "unpackedSize": 111764,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJK6aCRA9TVsSAnZWagAA10cP+gJgNurTRvy+SA1grXNa\ntrC1wgzs+2ZE9ycRsb7rOaG28IGF31FcLYSFcgTOJV18ii3uYCOqNTtYmGcP\nWfpkGONa9qqg652ouLVSbgSsiqshlmnuHDrcmrY1GqI7a3+V9h9ju1Yyg3GN\nCsh17RlVrDPaVs2cMqOAD8c3vV1hQ3nvZrh7/LEdRdxGQ+wVJjcj46coofPO\nMsgEkW1zt+zWy8rnAhd6hvk+24e4zmO6wx3y2Q1uqGBzrEPlSNnEx3n5j5Fn\nyu6emOh1Ezo0l8Ejs9uOY86OWFyaOftMTcwTs4UYn2vjufD8dDbqY14Fh+m4\nAvwBsiq8exlACln7e4GqYxzkyDaUFTHRyNm0Gm+nqXiufMrNEwYxQvNNMLYW\nPEPwix3KdJ2qOvVAXJe60TyRXuVj600SUjp9nJzkiUGVFYKEn/oDAcH2rWea\nahycErjEGJP4A1jEe4TZg+hdhfqr/0vZ4MFxEWw8V314+GbPEnGJjQ6ezzMM\nC15h0D7S1D8gww0VTjTbBaEV4n+meIjqQsYcnQbZYqrlEjzsyzBCCLSCfcKC\nKBvT6MwL15KB1VT780pq8cHe7RQYQCnAgn4+pS+B23m75ICruLfXbBye/h0Y\nvhjCBz7s7xDptrYQGhnZc4CuFZW2mJNAgIxUdt8/sFuX1KQBFI96LUOum/tb\noiEQ\r\n=aSNT\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "_npmUser": {
    "name": "ljharb",
    "email": "ljharb@gmail.com"
  },
  "directories": {},
  "maintainers": [
    {
      "name": "ljharb",
      "email": "ljharb@gmail.com"
    },
    {
      "name": "substack",
      "email": "substack@gmail.com"
    }
  ],
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/resolve_2.0.0-next.3_1613016729967_0.25728475441177423"
  },
  "_hasShrinkwrap": false,
  "_shasum": "d41016293d4a8586a39ca5d9b5f15cbea1f55e46",
  "_resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.3.tgz",
  "_from": "resolve@>=2.0.0-next.3 <3.0.0"
}
